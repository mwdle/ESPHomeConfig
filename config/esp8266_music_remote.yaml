# Important note:
# This ESPHome configuration is setup to utilize two different Home Assistant provided media_player entities.
# While both of these media_player entities actually refer to the same physical media player, they behave differently because they are provided by different integrations in Home Assistant.
# In the context of this configuration, media_player.audio_direct refers to the Google Cast Integration provided player, and media_player.audio refers to the Music Assistant Integration provided player.
# This is necessary to ensure that all the media playback controls can function properly regardless of the current media source of the media player (e.g. Music Assistant, or Spotify).

substitutions:
  device_name: emr
  device_description: ESP8266 Music Remote
  friendly_name: Music Remote

esphome:
  name: ${device_name}
  comment: ${device_description}

esp8266:
  board: nodemcuv2
  framework:
    version: recommended

wifi:
  ssid: !secret wifissid
  password: !secret wifipass
  power_save_mode: HIGH
  fast_connect: true # Don't do a full scan, connect immediately

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendly_name} Fallback Hotspot"
    password: !secret fallbackpass

captive_portal:

# Disable logging to save memory/battery
# logger:
#   baud_rate: 0
#   level: DEBUG
#   logs:
#     component: ERROR

# Enable Home Assistant API
api:
  # encryption: # ESP8266 isn't powerful enough to remain stable while providing encryption. Enabling encryption may result in frequent and unexpected resets
  #   key: !secret encryption_key

# Enable OTA updates
ota:
  - platform: esphome
    id: my_ota
    password: !secret otapass

# Disable web server to save memory/battery
# web_server:
#   version: 3
#   port: 80
#   auth:
#     username: !secret otauser
#     password: !secret otapass

font:
  - file:
      url: "https://raw.githubusercontent.com/googlefonts/opensans/main/fonts/ttf/OpenSans-Regular.ttf"
      type: web
    id: opensans
    size: 12
    glyphs:
      "%’&!\"\\'()+,-_.:°/$#€£¥?0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyzÀàÁáÃãçÈèÉéẼẽÌìÍíÑñôÒòÓóÕõØøŚśÙùÚúŨũ"

  - file:
      url: "https://raw.githubusercontent.com/Templarian/MaterialDesign-Webfont/master/fonts/materialdesignicons-webfont.ttf"
      type: web
    id: mdi_16
    size: 16
    glyphs: [
      '󰕾', # volume-high
      '󰖩', # wifi
      '󰖪', # wifi-off
      '󰄘', # cast
      '󰄙', # cast-connected
      '󰃟', # brightness-6
      '󰍺', # monitor-multiple
      '󱮖', # knob
    ]

  - file:
      url: "https://raw.githubusercontent.com/Templarian/MaterialDesign-Webfont/master/fonts/materialdesignicons-webfont.ttf"
      type: web
    id: mdi_18
    size: 18
    glyphs: [
      '󰏤', # pause
      '󰐊', # play
      '󰒮', # skip-previous
      '󰒭', # skip-next
      '󱬐', # volume-equal
    ]

i2c:
  sda: D7
  scl: D6
  scan: true
  frequency: 400kHz # Setting to default of 50khz breaks Wi-Fi. Regardless, this results in faster display updates and less delays from blocking display operations.

time:
  - platform: homeassistant
    id: esptime

# Balance/reduce OLED burn-in by inverting the display colors each minute
interval:
  - interval: 1min
    then:
      - lambda: |-
          static bool inverted = false;
          inverted = !inverted;
          id(screen).set_invert(inverted);

# Script to draw physical button icon representations on the display
script:
  id: render_ui_controls
  then:
    - lambda: |-
        id(screen).line(0, 47, 127, 47); // Horizontal line
        id(screen).print(13, 57, id(mdi_16), TextAlign::CENTER, "󰍺"); // monitor-multiple icon
        id(screen).print(41, 56, id(mdi_18), TextAlign::CENTER, "󰒮"); // skip-previous icon
        if (id(media_status).state == "playing" || id(media_status).state == "buffering") id(screen).print(67, 56, id(mdi_18), TextAlign::CENTER, "󰏤"); // pause icon
        else id(screen).print(65, 56, id(mdi_18), TextAlign::CENTER, "󰐊"); // play icon
        id(screen).print(91, 56, id(mdi_18), TextAlign::CENTER, "󰒭"); // skip-next icon
        id(screen).print(117, 56, id(mdi_18), TextAlign::CENTER, "󱬐"); // volume-equal icon

display:
  - platform: ssd1306_i2c
    id: screen
    model: "SSD1306 128x64"
    address: 0x3C
    rotation: 180°
    contrast: 0% # Use the lowest brightness to save battery life
    pages:
      - id: playbackPage
        lambda: |-
          static int width_threshold = 122;
          static int last_title_width = 0;
          static int last_artist_width = 0;

          const char* title = id(media_title).state.c_str();
          const char* artist = id(media_artist).state.c_str();

          if (global_api_server->is_connected() && title[0] != '\0') {
            static int title_width = 0, artist_width = 0, ignored1, ignored2, ignored3;
            id(opensans)->measure(title, &title_width, &ignored1, &ignored2, &ignored3);
            id(opensans)->measure(artist, &artist_width, &ignored1, &ignored2, &ignored3);
            static int half_title_width = title_width / 2;
            static int half_artist_width = artist_width / 2;

            static int title_scroll_pos = 64, wrapped_title_scroll_pos = 120 + (title_width >= artist_width ? half_title_width : half_artist_width);
            static int artist_scroll_pos = 64, wrapped_artist_scroll_pos = 120 + (artist_width > title_width ? half_artist_width : half_title_width);

            // If the track changed, recalculate the starting positions
            if (title_width != last_title_width || artist_width != last_artist_width) {
              last_title_width = title_width;
              last_artist_width = artist_width;
              half_title_width = title_width / 2;
              half_artist_width = artist_width / 2;
              title_scroll_pos = 64, wrapped_title_scroll_pos = 120 + (title_width >= artist_width ? half_title_width : half_artist_width);
              artist_scroll_pos = 64, wrapped_artist_scroll_pos = 120 + (artist_width > title_width ? half_artist_width : half_title_width);
            }

            // If title and artist fit comfortably on the display, center both.
            if (title_width < width_threshold && artist_width < width_threshold) {
              it.print(64, 10, id(opensans), TextAlign::CENTER, title);
              it.print(64, 24, id(opensans), TextAlign::CENTER, artist);
            }
            // If the title does not fit comfortably on the display but the artist does, scroll the title text, and center the artist.
            else if (title_width >= width_threshold && artist_width < width_threshold) {
              if (title_scroll_pos + half_title_width < 0) { // Reset the wrap around scroll position if the title has scrolled off the display
                title_scroll_pos = wrapped_title_scroll_pos;
                wrapped_title_scroll_pos = 120 + half_title_width;
              } else if (title_scroll_pos + half_title_width < 64) { // If the title is on the left half of the display, print the wrap around title on the right half
                it.print(wrapped_title_scroll_pos, 10, id(opensans), TextAlign::CENTER, title);
                wrapped_title_scroll_pos -= 24;
              }
              it.print(title_scroll_pos, 10, id(opensans), TextAlign::CENTER, title);
              it.print(64, 24, id(opensans), TextAlign::CENTER, artist);
              title_scroll_pos -= 24;
            }
            // If the artist does not fit comfortably on the display but the title does, scroll the artist text, and center the title.
            else if (artist_width >= width_threshold && title_width < width_threshold) {
              if (artist_scroll_pos + half_artist_width < 0) { // Reset the wrap around scroll position if the artist has scrolled off the display
                  artist_scroll_pos = wrapped_artist_scroll_pos;
                  wrapped_artist_scroll_pos = 120 + half_artist_width;
              } else if (artist_scroll_pos + half_artist_width < 64) { // If the artist is on the left half of the display, print the wrap around artist on the right half
                it.print(wrapped_artist_scroll_pos, 24, id(opensans), TextAlign::CENTER, artist);
                wrapped_artist_scroll_pos -= 24;
              }
              it.print(artist_scroll_pos, 24, id(opensans), TextAlign::CENTER, artist);
              it.print(64, 10, id(opensans), TextAlign::CENTER, title);
              artist_scroll_pos -= 24;
            }
            // If the title nor artist fit comfortably on the display, scroll both.
            else if (artist_width >= width_threshold && title_width >= width_threshold) {
              if (title_width >= artist_width) {
                if (title_scroll_pos + half_title_width < 0) { // Reset the wrap around scroll positions if the title has scrolled off the display
                  title_scroll_pos = wrapped_title_scroll_pos;
                  artist_scroll_pos = wrapped_artist_scroll_pos;
                  wrapped_title_scroll_pos = 120 + half_title_width;
                  wrapped_artist_scroll_pos = 120 + half_title_width;
                } else if (title_scroll_pos + half_title_width < 64) { // If the title is on the left half of the display, print the wrap around title and artist on the right half
                  it.print(wrapped_title_scroll_pos, 10, id(opensans), TextAlign::CENTER, title);
                  it.print(wrapped_artist_scroll_pos, 24, id(opensans), TextAlign::CENTER, artist);
                  wrapped_title_scroll_pos -= 24;
                  wrapped_artist_scroll_pos -= 24;
                }
                it.print(title_scroll_pos, 10, id(opensans), TextAlign::CENTER, title);
                it.print(artist_scroll_pos, 24, id(opensans), TextAlign::CENTER, artist);
                title_scroll_pos -= 24;
                artist_scroll_pos -= 24;
              }
              else {
                if (artist_scroll_pos + half_artist_width < 0) { // Reset the wrap around scroll positions if the artist has scrolled off the display
                    artist_scroll_pos = wrapped_artist_scroll_pos;
                    title_scroll_pos = wrapped_title_scroll_pos;
                    wrapped_artist_scroll_pos = 120 + half_artist_width;
                    wrapped_title_scroll_pos = 120 + half_artist_width;
                } else if (artist_scroll_pos + half_artist_width < 64) { // If the artist is on the left half of the display, print the wrap around artist and title on the right half
                  it.print(wrapped_artist_scroll_pos, 24, id(opensans), TextAlign::CENTER, artist);
                  it.print(wrapped_title_scroll_pos, 10, id(opensans), TextAlign::CENTER, title);
                  wrapped_artist_scroll_pos -= 24;
                  wrapped_title_scroll_pos -= 24;
                }
                it.print(artist_scroll_pos, 24, id(opensans), TextAlign::CENTER, artist);
                it.print(title_scroll_pos, 10, id(opensans), TextAlign::CENTER, title);
                artist_scroll_pos -= 24;
                title_scroll_pos -= 24;
              }
            }

            // Draw Volume Bar:
            it.print(1, 31, id(mdi_16), COLOR_ON, "󰕾", COLOR_OFF); // Print volume-high icon
            it.rectangle(18, 36, 107, 6); // Volume bar outline
            it.filled_rectangle(19, 37, int(id(media_volume).state * 106), 4); // Volume bar fill
          } 
          else it.print(64, 24, id(opensans), TextAlign::CENTER, "Player not connected");

          // Draw common UI controls:
          id(render_ui_controls).execute();

      - id: statsPage
        lambda: |-
          // Draw Stats
          auto wifi_signal = id(${device_name}_wifi_signal).state;
          if (isnan(wifi_signal) || wifi_signal > 0) it.print(3, 0, id(mdi_16), "󰖪"); // wifi
          else it.print(3, 0, id(mdi_16), "󰖩"); // wifi-off
          it.printf(22, 0, id(opensans), "%.0f%%", wifi_signal);
          bool api_connected = global_api_server->is_connected();
          if (api_connected) it.print(2, 15, id(mdi_16), "󰄙"); // cast-connected icon
          else it.print(2, 14, id(mdi_16), "󰄘"); // cast icon
          it.print(22, 14, id(opensans), api_connected ? "Connected" : "Disconnected");
          // it.print(3, 29, id(mdi_16), "󱮖"); // knob icon
          // it.printf(22, 29, id(opensans), "%.2f%%", id(knob).state);
          // Draw common UI controls:
          id(render_ui_controls).execute();

binary_sensor:
  - platform: gpio
    internal: true
    pin:
      number: RX
      mode:
        input: true
        pullup: true
    id: next_page_button
    on_press:
      - display.page.show_next: screen
  - platform: gpio
    internal: true
    pin:
      number: D3
      mode:
        input: true
        pullup: true
    id: media_previous_track
    on_press:
      then:
         - if:
              condition:
                lambda: 'return id(media_source).state == "Music Assistant";'
              then:
                - homeassistant.service:
                    service: media_player.media_previous_track
                    data:
                      entity_id: media_player.audio
              else:
                - homeassistant.service:
                    service: media_player.media_previous_track
                    data:
                      entity_id: media_player.audio_direct
  - platform: gpio
    internal: true
    pin:
      number: D4
      mode:
        input: true
        pullup: true
    id: media_play_pause
    on_press:
      - homeassistant.service:
          service: media_player.media_play_pause
          data:
            entity_id: media_player.audio
  - platform: gpio
    internal: true
    pin:
      number: D5
      mode:
        input: true
        pullup: true
    id: media_volume_sync
    on_press:
      - homeassistant.service:
          service: script.sync_audio_group_volume
  - platform: gpio
    internal: true
    pin:
      number: D8
      inverted: true
      mode:
        input: true # Internal pullup not available on D8, needs external pullup resistor
    id: media_next_track
    on_press:
      then:
         - if:
              condition:
                lambda: 'return id(media_source).state == "Music Assistant";'
              then:
                - homeassistant.service:
                    service: media_player.media_next_track
                    data:
                      entity_id: media_player.audio
              else:
                - homeassistant.service:
                    service: media_player.media_next_track
                    data:
                      entity_id: media_player.audio_direct

button:
  - platform: restart
    name: "Restart ${friendly_name}"
    icon: mdi:restart

sensor:
  - platform: rotary_encoder
    name: "Volume"
    id: volume
    pin_a:
      number: D2
      mode:
        input: true
        pullup: true
    pin_b:
      number: D1
      mode:
        input: true
        pullup: true
    on_clockwise:
      - homeassistant.service:
          service: media_player.volume_up
          data:
            entity_id: media_player.audio
    on_anticlockwise:
      - homeassistant.service:
          service: media_player.volume_down
          data:
            entity_id: media_player.audio
    filters:
      - debounce: 10ms
    internal: true
  - platform: wifi_signal
    name: "${friendly_name} WiFi signal"
    id: "${device_name}_wifi_signal"
    update_interval: 60s
    icon: mdi:broadcast
  - platform: homeassistant
    id: media_volume
    entity_id: media_player.audio_direct
    attribute: volume_level
    unit_of_measurement: "%"
    internal: true

text_sensor:
  - platform: homeassistant
    id: media_title
    entity_id: media_player.audio_direct
    attribute: media_title
    internal: true
  - platform: homeassistant
    id: media_artist
    entity_id: media_player.audio_direct
    attribute: media_artist
    internal: true
  - platform: homeassistant
    id: media_status
    entity_id: media_player.audio_direct
    internal: true
  - platform: homeassistant
    id: media_source
    entity_id: media_player.audio_direct
    attribute: app_name
    internal: true